# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: black --check .
    
    - name: Test API endpoints
      run: |
        # Create minimal test model for CI
        python -c "
        import torch
        import torch.nn as nn
        import json
        
        # Create dummy model for testing
        class DummyModel(nn.Module):
            def __init__(self):
                super().__init__()
                self.fc = nn.Linear(224*224*3, 6)
            def forward(self, x):
                return self.fc(x.view(x.size(0), -1))
        
        model = DummyModel()
        metadata = {
            'class_names': ['cardboard', 'glass', 'metal', 'paper', 'plastic', 'trash'],
            'num_classes': 6
        }
        
        torch.save({
            'model_state_dict': model.state_dict(),
            'metadata': metadata,
            'model_architecture': 'test'
        }, 'waste_classifier.pth')
        
        with open('dataset_metadata.json', 'w') as f:
            json.dump(metadata, f)
        "
        
        # Test basic imports
        python -c "
        from fastapi_backend import app
        from streamlit_app import WasteClassifierApp
        print('âœ… All imports successful')
        "

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/waste-classifier:latest
          ${{ secrets.DOCKER_USERNAME }}/waste-classifier:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-railway:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Railway
      uses: bervProject/railway-deploy@v1.2.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: waste-classifier-api